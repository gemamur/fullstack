{"version":3,"sources":["../inlined/services/share-buttons.service.ts"],"names":[],"mappings":"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","file":"share-buttons.service.js","sourceRoot":"","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Http, Jsonp, Headers, RequestOptions } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/empty';\n\nimport { WindowService } from './window.service';\nimport { ShareArgs, ShareProvider, Helper } from '../helpers/index';\n\ndeclare const global: any; // To make AoT compiler (ngc) happy\n\n\nexport class ShareButtonsService {\n\n    /** Window Object */\n    window: Window;\n    /** Optional parameters */\n    windowWidth: number = 500;\n    windowHeight: number = 400;\n\n    /** Site Twitter Account: Add Via @TwitterAccount to the tweet  */\n    twitterAccount: string;\n\n    constructor(window: WindowService, private http: Http, private jsonp: Jsonp) {\n        this.window = window.nativeWindow;\n    }\n\n    validateUrl(url: string) {\n        /** If URL is specified then validate it, otherwise use window URL */\n        if (url) {\n            let r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n            if (r.test(url)) {\n                return encodeURIComponent(url);\n            } else {\n                console.warn('[ShareButtons]: Invalid URL, fallback to Window URL');\n            }\n        }\n        /** fallback to \"Window\" URL, or to \"Global\" in universal */\n        return (this.window) ? encodeURIComponent(this.window.location.href) : (<any>global).url || '';\n    }\n\n\n    /** Open share window */\n    share(type: ShareProvider, args: ShareArgs, popUpClosed: EventEmitter<ShareProvider>) {\n\n        /** include twitterAccount in args for twitter button */\n        if (this.twitterAccount) {\n            args = Object.assign({}, args, { via: this.twitterAccount });\n        }\n\n        /** check for mobile browser (this won't detect tablets browser) */\n        if (this.window.innerWidth <= 480) {\n            args = Object.assign({}, args, { mobile: true });\n        }\n\n        let popUp = this.window.open(Helper.shareFactory(type, args), 'newwindow', this.windowAttr());\n\n        /** Emit clicked button */\n        if (this.window) {\n            let pollTimer = this.window.setInterval(() => {\n                if (popUp.closed) {\n                    this.window.clearInterval(pollTimer);\n                    popUpClosed.emit(type);\n                }\n            }, 200);\n        }\n    }\n\n    /** Share Counts */\n    count(type: ShareProvider, url: string, count: EventEmitter<number>) {\n\n        switch (type) {\n            case ShareProvider.FACEBOOK:\n                this.fbCount(url, count);\n                break;\n            case ShareProvider.LINKEDIN:\n                this.linkedInCount(url, count);\n                break;\n            case ShareProvider.REDDIT:\n                this.redditCount(url, count);\n                break;\n            case ShareProvider.TUMBLR:\n                this.tumblrCount(url, count);\n                break;\n            case ShareProvider.GOOGLEPLUS:\n                this.gPlusCount(url, count);\n                break;\n            case ShareProvider.PINTEREST:\n                this.pinCount(url, count);\n                break;\n            default:\n        }\n    }\n\n    private fbCount(url: string, count: EventEmitter<number>) {\n        this.fetch(`https://graph.facebook.com/?id=${url}`)\n            .subscribe((data: any) => {\n                data = data.json();\n                if (data.hasOwnProperty('share') && data.share.hasOwnProperty('share_count')) {\n                    count.emit(data.share.share_count);\n                    return;\n                }\n                count.emit(0);\n            });\n    }\n\n    private linkedInCount(url: string, count: EventEmitter<number>) {\n        this.fetchJsonp(`https://www.linkedin.com/countserv/count/share?url=${url}`)\n            .subscribe((data: any) => {\n                data = data.json();\n                count.emit(data.count || 0);\n            });\n    }\n\n    private redditCount(url: string, count: EventEmitter<number>) {\n        this.fetch(`https://buttons.reddit.com/button_info.json?url=${url}`)\n            .subscribe((data: any) => {\n                data = data.json();\n                if (data.hasOwnProperty('data') && data.data.hasOwnProperty('children')) {\n                    if (data.data.children.length) {\n                        count.emit(data.data.children[0].data.score);\n                        return;\n                    }\n                }\n                count.emit(0);\n            });\n    }\n\n    private gPlusCount(url: string, count: EventEmitter<number>) {\n        let body = Helper.gplusCountBody(url);\n        this.post('https://clients6.google.com/rpc?key=AIzaSyCKSbrvQasunBoV16zDH9R33D88CeLr9gQ', body)\n            .subscribe((data: any) => {\n                data = data.json();\n                if (data[0] && data[0].hasOwnProperty('result')) {\n                    count.emit(data[0].result.metadata.globalCounts.count);\n                    return;\n                }\n                count.emit(0);\n            });\n    }\n\n    private pinCount(url: string, count: EventEmitter<number>) {\n        this.fetch(`https://api.pinterest.com/v1/urls/count.json?callback=receiveCount&url=${url}`)\n            .subscribe((data: any) => {\n                data = data.text();\n                let result = JSON.parse(data.replace(/^receiveCount\\((.*)\\)/, '$1'));\n                count.emit(result.count || 0);\n            });\n    }\n\n    private tumblrCount(url: string, count: EventEmitter<number>) {\n        this.fetchJsonp(`https://api.tumblr.com/v2/share/stats?url=${url}`)\n            .subscribe((data: any) => {\n                data = data.json();\n                if (data.hasOwnProperty('response') && data.response.hasOwnProperty('note_count')) {\n                    count.emit(data.response.note_count);\n                    return;\n                }\n                count.emit(0);\n            });\n    }\n\n    private post(url: string, body: any) {\n        let headers = new Headers({ 'Content-Type': 'application/json' });\n        let options = new RequestOptions({ headers: headers });\n        return this.http.post(url, body, options)\n            .catch((err) => Observable.empty());\n    }\n\n    private fetch(url: string) {\n        return this.http.get(url)\n            .catch((err) => Observable.empty());\n    }\n\n    private fetchJsonp(url: string) {\n        return this.jsonp.request(`${url}&format=jsonp&callback=JSONP_CALLBACK`)\n            .catch((err) => Observable.empty());\n    }\n\n    windowAttr() {\n        return 'width=' + this.windowWidth + ', height=' + this.windowHeight;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WindowService, },\n{type: Http, },\n{type: Jsonp, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}